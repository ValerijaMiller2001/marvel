{"version":3,"file":"static/js/734.2eeb010c.chunk.js","mappings":"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","sources":["components/app-banner/app-banner.js","components/error-message/error-message.js","components/comics-list/comics-list.js","components/pages/comics-page.js","hooks/http.hook.js","services/marvel-service.js"],"sourcesContent":["import './app-banner.scss';\r\nimport avengers from '../../resources/img/avengers.png';\r\nimport avengersLogo from '../../resources/img/avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"banner\">\r\n            <div className=\"banner_wrapper\">\r\n                <img src={avengers} alt=\"avengers\" className=\"banner_img\" />\r\n                <div className=\"banner_title\">\r\n                    New comics every week!\r\n                    <br />\r\n                    Stay tuned!\r\n                </div>\r\n                <img src={avengersLogo} alt=\"avengers logo\" className=\"banner_img\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBanner;","import errorGif from './error.gif';\r\nimport './error-message.scss';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={errorGif} alt=\"error\" className='error' />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useState, useEffect} from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport useMarvelService from '../../services/marvel-service';\r\nimport Spinner from '../spinner/spinner';\r\nimport ErrorMessage from '../error-message/error-message';\r\nimport './comics-list.scss';\r\n\r\nconst ComicsList = (props) => {\r\n    const [comicList, setComicList] = useState([]);\r\n\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(0);\r\n    const [comicEnded, setComicEnded] = useState(false);\r\n\r\n    const {loading, error, getAllComics} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllComics(offset)\r\n            .then(onComicListLoaded)\r\n    }\r\n\r\n    const onComicListLoaded = (newComicList) => {\r\n        let ended = false;\r\n        if (newComicList.lenght < 8) {\r\n            ended = true\r\n        }\r\n\r\n        setComicList(comicList => [...comicList, ...newComicList]);\r\n        setNewItemLoading(false);\r\n        setOffset(offset => offset + 8);\r\n        setComicEnded(ended);\r\n    }\r\n\r\n    function renderItems(arr) {\r\n        const items = arr.map((item, i) => {\r\n            return (\r\n                <li className=\"comicslist_item\" key={i}>\r\n                    <Link to={`/comics/${item.id}`}>\r\n                        <img src={item.thumbnail} alt={item.title} className=\"comicslist_img\" />\r\n                        <div className=\"comicslist_title\">{item.title}</div>\r\n                        <div className=\"comicslist_subtitle\">{item.price}</div>\r\n                    </Link>\r\n                </li>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <ul className=\"comicslist_wrapper\">\r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n\r\n    const items = renderItems(comicList);\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n\r\n    return (\r\n        <div className=\"comicslist\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}\r\n            <button \r\n                className='btn btn_long' \r\n                disabled={newItemLoading}\r\n                style={{'display': comicEnded ? 'none' : 'block'}}\r\n                onClick={() => onRequest(offset)}>\r\n                    LOAD MORE\r\n            </button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nexport default ComicsList;","import ComicsList from \"../comics-list/comics-list\";\r\nimport AppBanner from '../app-banner/app-banner';\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <AppBanner />\r\n            <ComicsList />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'appliccatio/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n    return {loading, request, error, clearError};\r\n}","//Запросы к серверу\r\nimport { useHttp } from \"../hooks/http.hook\";\r\n\r\n\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=d8d46a206e1d29c225cfc50d92cea400';\r\n    const _baseOffset = 210;\r\n\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.description || 'There is no description',\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            price: comic.prices[0].price ? `${comic.prices[0].price}$` : 'not available',\r\n            pageCount: comic.pageCount ? `${comic.pageCount} p.` : 'No information about the number of pages',\r\n            language: comic.textObjects[0]?.language || \"en-us\",\r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName};\r\n}\r\n\r\nexport default useMarvelService;"],"names":["AppBanner","_jsx","className","children","_jsxs","src","avengers","alt","avengersLogo","ErrorMessage","errorGif","props","comicList","setComicList","useState","newItemLoading","setNewItemLoading","offset","setOffset","comicEnded","setComicEnded","loading","error","getAllComics","useMarvelService","useEffect","onRequest","initial","then","onComicListLoaded","newComicList","ended","lenght","items","arr","map","item","i","Link","to","concat","id","thumbnail","title","price","renderItems","errorMessage","spinner","Spinner","disabled","style","onClick","ComicsPage","_Fragment","ComicsList","request","clearError","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","status","data","json","e","message","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","path","extension","homepage","urls","wiki","comics","_transformComics","comic","_comic$textObjects$","prices","pageCount","language","textObjects","getAllCharacters","results","getCharacter","res","getComic","getCharacterByName"],"sourceRoot":""}