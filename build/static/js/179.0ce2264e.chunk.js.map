{"version":3,"file":"static/js/179.0ce2264e.chunk.js","mappings":"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","sources":["components/error-message/error-message.js","components/skeleton/skeleton.js","components/char-info/char-info.js","components/char-list/char-list.js","components/asset/asset.js","components/random-char/random-char.js","components/char-search/char-search.js","components/error-boundary/error-boundary.js","components/pages/main-page.js","hooks/http.hook.js","services/marvel-service.js"],"sourcesContent":["import errorGif from './error.gif';\r\nimport './error-message.scss';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={errorGif} alt=\"error\" className='error' />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <div className=\"sceleton\">\r\n            <div className=\"sceleton_title\">Please select a character to see information</div>\r\n            <div className=\"sceleton_block\">\r\n                <div className=\"sceleton_circle pulse\"></div>\r\n                <div className=\"sceleton_rectangle_mini pulse\"></div>\r\n                <div className=\"sceleton_rectangle_big pulse\"></div>\r\n                <div className=\"sceleton_rectangle_big pulse\"></div>\r\n                <div className=\"sceleton_rectangle_big pulse\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport useMarvelService from '../../services/marvel-service';\r\nimport ErrorMessage from '../error-message/error-message';\r\nimport Spinner from '../spinner/spinner';\r\nimport Skeleton from '../skeleton/skeleton';\r\nimport './char-info.scss';\r\n\r\nconst CharInfo = (props) => {\r\n    const [char, setChar] = useState(null);\r\n\r\n    const {loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [props.charId])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n        clearError();\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n\r\n    const skeleton = char || loading || error ? null : <Skeleton />;\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading ? <Spinner /> : null;\r\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\r\n\r\n    return (\r\n        <div className='charinfo'>\r\n            {skeleton}\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </div>      \r\n    )\r\n   \r\n}\r\n\r\nconst View = ({char}) => {\r\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"charinfo_header\">\r\n                <img src={thumbnail} alt={name} className='charinfo_img' style={imgStyle} />\r\n                <div className=\"charinfo_header_block\">\r\n                    <div className=\"charinfo_name\">{name}</div>\r\n                    <a href={homepage} className=\"btn btn_red charinfo_btn_red\">HOMEPAGE</a>\r\n                    <a href={wiki} className=\"btn btn_grey charinfo_btn_grey\">WIKI</a>\r\n                </div>\r\n            </div>\r\n            <div className=\"charinfo_descr\">{description}</div>\r\n            <div className=\"charinfo_comics\">\r\n                <div className=\"charinfo_comics_title\">Comics:</div>\r\n                <ul className=\"charinfo_comics_list\">\r\n                    {comics.lenght > 0 ? null : 'There is no comics with this character'}\r\n                    {\r\n                        comics.map((item, i) => {\r\n                            if (i > 9) return;\r\n                            return (\r\n                                <li key={i} className=\"charinfo_comics_item\">{item.name}</li> \r\n                            )\r\n                        })\r\n                    }\r\n   \r\n                </ul>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import {useState, useEffect, useRef} from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport useMarvelService from '../../services/marvel-service';\r\nimport Spinner from '../spinner/spinner';\r\nimport ErrorMessage from '../error-message/error-message';\r\nimport './char-list.scss';\r\n\r\nconst CharList = (props) => {\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n    \r\n    const {loading, error, getAllCharacters} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n        // onRequest(offset);\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.lenght < 9) {\r\n            ended = true\r\n        }\r\n\r\n        setCharList(charList => [...charList, ...newCharList]);\r\n        setNewItemLoading(newItemLoading => false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(charEnded => ended);\r\n    } \r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('charlist_item_selected'));\r\n        itemRefs.current[id].classList.add('charlist_item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    function renderItems(arr) {\r\n        const items = arr.map((item, i) => {\r\n            let imgStyle = {'objectFit' : 'cover'};\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = {'objectFit' : 'unset'};\r\n            }\r\n\r\n            return (\r\n                <div \r\n                    className=\"charlist_item\" \r\n                    tabIndex={0}\r\n                    ref={el => itemRefs.current[i] = el}\r\n                    key={item.id}\r\n                    onClick={() => {\r\n                        props.onCharSelected(item.id);\r\n                        focusOnItem(i);\r\n                    }}\r\n                    onKeyPress={(e) => {\r\n                        if (e.key === ' ' || e.key === \"Enter\") {\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i);\r\n                        }\r\n                    }}>\r\n                    <img src={item.thumbnail} alt={item.name}className=\"charlist_img\" style={imgStyle} />\r\n                    <div className=\"charlist_title\">{item.name}</div>\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div className=\"charlist_wrapper\">\r\n                {items}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const items = renderItems(charList);\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\r\n    return (\r\n        <div className=\"charlist\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}\r\n            <button \r\n                className='btn btn_long'\r\n                disabled={newItemLoading}\r\n                style={{'display': charEnded ? 'none' : 'block'}}\r\n                onClick={() => onRequest(offset)}>\r\n                LOAD MORE\r\n            </button>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import './asset.scss';\r\nimport asset from '../../resources/img/asset.png';\r\n\r\nconst Asset = () => {\r\n    return (\r\n        <div className=\"asset\">\r\n            <img src={asset} alt=\"asset\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Asset;","import {useState, useEffect} from 'react'\r\nimport Spinner from '../spinner/spinner';\r\nimport useMarvelService from '../../services/marvel-service';\r\nimport ErrorMessage from '../error-message/error-message';\r\n\r\nimport './random-char.scss';\r\nimport decoration from '../../resources/img/decoration.png';\r\n\r\nconst RandomChar = () => {\r\n    const [char, setChar] = useState({});\r\n\r\n    const {loading, error, getCharacter, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        // const timerId = setInterval(updateChar, 10000);\r\n        // return () => {\r\n        //     clearInterval(timerId)\r\n        // } \r\n    }, [])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading ? <Spinner /> : null;\r\n    const content = !(loading || error) ? <View char={char} /> : null;\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            <div className=\"randomchar_wrapper\">\r\n                {errorMessage}\r\n                {spinner}\r\n                {content}\r\n\r\n                <div className=\"randomchar_black\">\r\n                    <div className=\"randomchar_black_title\">\r\n                        Random character for today!\r\n                        <br />\r\n                        Do you want to get to know him better?\r\n                    </div>\r\n                    <div className=\"randomchar_black_title\">Or choose another one</div>\r\n                    <button className='btn btn_red randomchar_black_btn' onClick={updateChar}>TRY IT</button>\r\n                    <img src={decoration} alt=\"decoration\" className='randomchar_black_img' />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({char}) => {\r\n    const {name, description, thumbnail, homepage, wiki} = char;\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n    return (\r\n        <div className=\"randomchar_white\">\r\n            <img src={thumbnail} alt={name} className=\"randomchar_white_img\" style={imgStyle} />\r\n            <div className=\"randomchar_white_block\">\r\n                <div className=\"randomchar_white_title\">{name}</div>\r\n                <div className=\"randomchar_white_descr\">{description}</div>\r\n                <div className=\"randomchar_white_btns\">\r\n                    <a href={homepage} className=\"btn btn_red\">HOMEPAGE</a>\r\n                    <a href={wiki} className=\"btn btn_grey\">WIKI</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage} from 'formik';\r\nimport * as yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\nimport useMarvelService from '../../services/marvel-service';\r\nimport ErrorMessage from '../error-message/error-message';\r\n\r\nimport './char-search.scss';\r\n\r\n\r\nconst CharSearch = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, clearError, getCharacterByName} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const results = !char ? null : char.length > 0 ? \r\n                                                <div className=\"search_wrapper\">\r\n                                                    <div className=\"search_title search_title_green\">There is! Visit {char[0].name} page?</div>\r\n                                                    <Link to={`/characters/${char[0].id}`}>\r\n                                                        <button type='submit' className=\"btn btn_grey\">TO PAGE</button>\r\n                                                    </Link>\r\n                                                </div> :\r\n                                                <div className=\"search_wrapper\">\r\n                                                    <div className=\"search_title search_title_red\">The character was not found. Check the name and try again</div>\r\n                                                </div>    \r\n    return (\r\n        <div className=\"search\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={yup.object({\r\n                    charName: yup.string().required('This field is required')\r\n                })}\r\n                onSubmit={({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"search_title\" htmlFor='charName'>Or find a character by name:</label>\r\n                    <div className=\"search_wrapper\">\r\n                        <Field \r\n                            id='charName'\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder='Enter name'\r\n                            className='search_input'/>\r\n                                <button \r\n                                    type='submit' \r\n                                    className=\"btn btn_red\"\r\n                                    disabled={loading}>\r\n                                        FIND\r\n                                </button>\r\n                    </div>\r\n                    <FormikErrorMessage component='div' className='search_error' name='charName'/>\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearch;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../error-message/error-message\";\r\nimport './error-boundary.scss';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return (\r\n                <div className=\"boundary\">\r\n                    <ErrorMessage />\r\n                </div>\r\n            ) \r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport CharInfo from \"../char-info/char-info\";\r\nimport CharList from \"../char-list/char-list\";\r\nimport Asset from \"../asset/asset\";\r\nimport RandomChar from \"../random-char/random-char\";\r\nimport CharSearch from \"../char-search/char-search\";\r\nimport ErrorBoundary from \"../error-boundary/error-boundary\";\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"wrapper\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <div className=\"right\">\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                        <CharSearch/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <Asset />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'appliccatio/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n    return {loading, request, error, clearError};\r\n}","//Запросы к серверу\r\nimport { useHttp } from \"../hooks/http.hook\";\r\n\r\n\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=d8d46a206e1d29c225cfc50d92cea400';\r\n    const _baseOffset = 210;\r\n\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.description || 'There is no description',\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            price: comic.prices[0].price ? `${comic.prices[0].price}$` : 'not available',\r\n            pageCount: comic.pageCount ? `${comic.pageCount} p.` : 'No information about the number of pages',\r\n            language: comic.textObjects[0]?.language || \"en-us\",\r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName};\r\n}\r\n\r\nexport default useMarvelService;"],"names":["ErrorMessage","_jsx","src","errorGif","alt","className","Skeleton","_jsxs","children","View","_ref","char","name","description","thumbnail","homepage","wiki","comics","imgStyle","style","href","lenght","map","item","i","props","setChar","useState","loading","error","getCharacter","clearError","useMarvelService","useEffect","updateChar","charId","onCharLoaded","then","skeleton","errorMessage","spinner","Spinner","content","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","itemRefs","useRef","focusOnItem","id","current","forEach","classList","remove","add","focus","items","arr","tabIndex","ref","el","onClick","onCharSelected","onKeyPress","e","key","renderItems","disabled","Asset","asset","RandomChar","Math","floor","random","decoration","CharSearch","getCharacterByName","results","length","Link","to","concat","type","Formik","initialValues","charName","validationSchema","yup","required","onSubmit","Form","htmlFor","Field","placeholder","FormikErrorMessage","component","ErrorBoundary","Component","constructor","arguments","state","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","_Fragment","CharList","CharInfo","request","useHttp","setLoading","setError","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","Error","status","data","json","message","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","comic","_comic$textObjects$","title","price","prices","pageCount","language","textObjects","res","getAllComics","getComic"],"sourceRoot":""}