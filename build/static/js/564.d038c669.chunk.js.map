{"version":3,"file":"static/js/564.d038c669.chunk.js","mappings":"qPAIA,MAgBA,EAhBkBA,KAEVC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,SAAQC,UACnBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,OAAKI,IAAKC,EAAUC,IAAI,WAAWL,UAAU,gBAC7CE,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,CAAC,0BAE1BF,EAAAA,EAAAA,KAAA,SAAM,kBAGVA,EAAAA,EAAAA,KAAA,OAAKI,IAAKG,EAAcD,IAAI,gBAAgBL,UAAU,mB,wGCXtE,MAMA,EANqBO,KAEbR,EAAAA,EAAAA,KAAA,OAAKI,IAAKK,EAAUH,IAAI,QAAQL,UAAU,S,gHCElD,MAwCA,EAxCmBS,IAA4B,IAA3B,UAACC,EAAS,SAAEC,GAASF,EACrC,MAAM,GAACG,IAAMC,EAAAA,EAAAA,MAENC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,OAC3B,QAACC,EAAO,MAAEC,EAAK,SAAEC,EAAQ,aAAEC,EAAY,WAAEC,IAAcC,EAAAA,EAAAA,MAE7DC,EAAAA,EAAAA,YAAU,KACNC,GAAY,GACb,CAACZ,IAEJ,MAAMa,EAAgBX,IAClBC,EAAQD,EAAK,EAGXU,EAAaA,KAEf,OADAH,IACQV,GACJ,IAAK,QACDQ,EAASP,GAAIc,KAAKD,GAClB,MACJ,IAAK,YACDL,EAAaR,GAAIc,KAAKD,GAC9B,EAGEE,EAAeT,GAAQnB,EAAAA,EAAAA,KAACQ,EAAAA,EAAY,IAAM,KAC1CqB,EAAUX,GAAUlB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAO,IAAM,KAClCC,EAAYb,GAAWC,IAAUJ,EAAoC,MAA5Bf,EAAAA,EAAAA,KAACW,EAAS,CAACI,KAAMA,IAEhE,OACIZ,EAAAA,EAAAA,MAAA6B,EAAAA,SAAA,CAAA9B,SAAA,EACIF,EAAAA,EAAAA,KAACD,EAAAA,EAAS,IACT6B,EACAC,EACAE,IACF,C,6CCxCJ,MCgEP,EA7DyBR,KACrB,MAAM,QAACL,EAAO,QAAEe,EAAO,MAAEd,EAAK,WAAEG,GDJbY,MACnB,MAAOhB,EAASiB,IAAclB,EAAAA,EAAAA,WAAS,IAChCE,EAAOiB,IAAYnB,EAAAA,EAAAA,UAAS,MA0BnC,MAAO,CAACC,UAASe,SAxBDI,EAAAA,EAAAA,cAAYC,eAAOC,GAAsF,IAAjFC,EAAMC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,MAAOG,EAAIH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAAMI,EAAOJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,eAAgB,oBAE5FN,GAAW,GAEX,IACI,MAAMW,QAAiBC,MAAMR,EAAK,CAACC,SAAQI,OAAMC,YAEjD,IAAKC,EAASE,GACV,MAAM,IAAIC,MAAM,mBAADC,OAAoBX,EAAG,cAAAW,OAAaJ,EAASK,SAGhE,MAAMpC,QAAa+B,EAASM,OAE5B,OADAjB,GAAW,GACJpB,CAEX,CAAE,MAAMsC,GAGJ,MAFAlB,GAAW,GACXC,EAASiB,EAAEC,SACLD,CACV,CAEJ,GAAG,IAGuBlC,QAAOG,YADde,EAAAA,EAAAA,cAAY,IAAMD,EAAS,OAAO,IACT,ECxBEF,GAExCqB,EAAW,4CACXC,EAAU,0CA8BVC,EAAuBC,IAClB,CACH7C,GAAI6C,EAAK7C,GACT8C,KAAMD,EAAKC,KACXC,YAAaF,EAAKE,YAAW,GAAAV,OAAMQ,EAAKE,YAAYC,MAAM,EAAG,KAAI,OAAQ,6CACzEC,UAAWJ,EAAKI,UAAUC,KAAO,IAAML,EAAKI,UAAUE,UACtDC,SAAUP,EAAKQ,KAAK,GAAG3B,IACvB4B,KAAMT,EAAKQ,KAAK,GAAG3B,IACnB6B,OAAQV,EAAKU,OAAOC,QAItBC,EAAoBC,IAAW,IAADC,EAChC,MAAO,CACH3D,GAAI0D,EAAM1D,GACV4D,MAAOF,EAAME,MACbb,YAAaW,EAAMX,aAAe,0BAClCE,UAAWS,EAAMT,UAAUC,KAAO,IAAMQ,EAAMT,UAAUE,UACxDU,MAAOH,EAAMI,OAAO,GAAGD,MAAK,GAAAxB,OAAMqB,EAAMI,OAAO,GAAGD,MAAK,KAAM,gBAC7DE,UAAWL,EAAMK,UAAS,GAAA1B,OAAMqB,EAAMK,UAAS,OAAQ,2CACvDC,UAA8B,QAApBL,EAAAD,EAAMO,YAAY,UAAE,IAAAN,OAAA,EAApBA,EAAsBK,WAAY,QAC/C,EAGL,MAAO,CAAC3D,UAASC,QAAO4D,iBAjDCzC,iBAAiC,IAA1B0C,EAAMvC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAJlB,IAMhB,aADkBR,EAAQ,GAADiB,OAAIK,EAAQ,8BAAAL,OAA6B8B,EAAM,KAAA9B,OAAIM,KACjEzC,KAAKkE,QAAQC,IAAIzB,EAChC,EA8C0CpC,aAvCrBiB,UACjB,MAAM6C,QAAYlD,EAAQ,GAADiB,OAAIK,EAAQ,eAAAL,OAAcrC,EAAE,KAAAqC,OAAIM,IACzD,OAAOC,EAAoB0B,EAAIpE,KAAKkE,QAAQ,GAAG,EAqCK3D,aAAY8D,aAlC/C9C,iBAAiC,IAA1B0C,EAAMvC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAnBd,IAqBhB,aADkBR,EAAQ,GAADiB,OAAIK,EAAQ,0BAAAL,OAAyB8B,EAAM,KAAA9B,OAAIM,KAC7DzC,KAAKkE,QAAQC,IAAIZ,EAChC,EA+BkFlD,SA7BjEkB,UACb,MAAM6C,QAAYlD,EAAQ,GAADiB,OAAIK,EAAQ,WAAAL,OAAUrC,EAAE,KAAAqC,OAAIM,IACrD,OAAOc,EAAiBa,EAAIpE,KAAKkE,QAAQ,GAAG,EA2B4CI,mBA5CjE/C,gBACLL,EAAQ,GAADiB,OAAIK,EAAQ,oBAAAL,OAAmBS,EAAI,KAAAT,OAAIM,KACrDzC,KAAKkE,QAAQC,IAAIzB,GA0C+E,C","sources":["components/app-banner/app-banner.js","components/error-message/error-message.js","components/pages/single-page.js","hooks/http.hook.js","services/marvel-service.js"],"sourcesContent":["import './app-banner.scss';\r\nimport avengers from '../../resources/img/avengers.png';\r\nimport avengersLogo from '../../resources/img/avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"banner\">\r\n            <div className=\"banner_wrapper\">\r\n                <img src={avengers} alt=\"avengers\" className=\"banner_img\" />\r\n                <div className=\"banner_title\">\r\n                    New comics every week!\r\n                    <br />\r\n                    Stay tuned!\r\n                </div>\r\n                <img src={avengersLogo} alt=\"avengers logo\" className=\"banner_img\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBanner;","import errorGif from './error.gif';\r\nimport './error-message.scss';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={errorGif} alt=\"error\" className='error' />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useParams } from 'react-router-dom';\r\nimport useMarvelService from '../../services/marvel-service';\r\nimport { useState, useEffect } from 'react';\r\nimport ErrorMessage from '../error-message/error-message';\r\nimport Spinner from '../spinner/spinner';\r\nimport AppBanner from '../app-banner/app-banner';\r\n\r\nconst SinglePage = ({Component, dataType}) => {\r\n    const {id} = useParams();\r\n\r\n    const [data, setData] = useState(null);\r\n    const {loading, error, getComic, getCharacter, clearError} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateData();\r\n    }, [id])\r\n\r\n    const onDataLoaded = (data) => {\r\n        setData(data);\r\n    }\r\n\r\n    const updateData = () => {\r\n        clearError();\r\n        switch (dataType) {\r\n            case 'comic':\r\n                getComic(id).then(onDataLoaded);\r\n                break;\r\n            case 'character':\r\n                getCharacter(id).then(onDataLoaded);\r\n        }\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage /> : null;\r\n    const spinner = loading ? <Spinner /> : null;\r\n    const content = !(loading || error || !data) ? <Component data={data} /> : null;\r\n\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default SinglePage;","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'appliccatio/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n    return {loading, request, error, clearError};\r\n}","//Запросы к серверу\r\nimport { useHttp } from \"../hooks/http.hook\";\r\n\r\n\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=d8d46a206e1d29c225cfc50d92cea400';\r\n    const _baseOffset = 210;\r\n\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.description || 'There is no description',\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            price: comic.prices[0].price ? `${comic.prices[0].price}$` : 'not available',\r\n            pageCount: comic.pageCount ? `${comic.pageCount} p.` : 'No information about the number of pages',\r\n            language: comic.textObjects[0]?.language || \"en-us\",\r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName};\r\n}\r\n\r\nexport default useMarvelService;"],"names":["AppBanner","_jsx","className","children","_jsxs","src","avengers","alt","avengersLogo","ErrorMessage","errorGif","_ref","Component","dataType","id","useParams","data","setData","useState","loading","error","getComic","getCharacter","clearError","useMarvelService","useEffect","updateData","onDataLoaded","then","errorMessage","spinner","Spinner","content","_Fragment","request","useHttp","setLoading","setError","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","Error","concat","status","json","e","message","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","comic","_comic$textObjects$","title","price","prices","pageCount","language","textObjects","getAllCharacters","offset","results","map","res","getAllComics","getCharacterByName"],"sourceRoot":""}