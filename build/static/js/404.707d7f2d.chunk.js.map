{"version":3,"file":"static/js/404.707d7f2d.chunk.js","mappings":"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","sources":["components/error-message/error-message.js","components/char-info/char-info.js","components/char-list/char-list.js","components/asset/asset.js","components/random-char/random-char.js","components/char-search/char-search.js","components/error-boundary/error-boundary.js","components/pages/main-page.js","hooks/http.hook.js","services/marvel-service.js","components/skeleton/skeleton.js","utils/set-content.js"],"sourcesContent":["import errorGif from './error.gif';\r\nimport './error-message.scss';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={errorGif} alt=\"error\" className='error' />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport useMarvelService from '../../services/marvel-service';\r\nimport setContent from '../../utils/set-content';\r\nimport './char-info.scss';\r\n\r\nconst CharInfo = (props) => {\r\n    const [char, setChar] = useState(null);\r\n\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        // eslint-disable-next-line\r\n    }, [props.charId])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n        clearError();\r\n        getCharacter(charId)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    return (\r\n        <div className='charinfo'>\r\n            {setContent(process, View, char)}\r\n        </div>      \r\n    )\r\n   \r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homepage, wiki, comics} = data;\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"charinfo_header\">\r\n                <img src={thumbnail} alt={name} className='charinfo_img' style={imgStyle} />\r\n                <div className=\"charinfo_header_block\">\r\n                    <div className=\"charinfo_name\">{name}</div>\r\n                    <a href={homepage} className=\"btn btn_red charinfo_btn_red\">HOMEPAGE</a>\r\n                    <a href={wiki} className=\"btn btn_grey charinfo_btn_grey\">WIKI</a>\r\n                </div>\r\n            </div>\r\n            <div className=\"charinfo_descr\">{description}</div>\r\n            <div className=\"charinfo_comics\">\r\n                <div className=\"charinfo_comics_title\">Comics:</div>\r\n                <ul className=\"charinfo_comics_list\">\r\n                    {comics.lenght > 0 ? null : 'There is no comics with this character'}\r\n                    {\r\n                        comics.map((item, i) => {\r\n                            // eslint-disable-next-line\r\n                            if (i > 9) return;\r\n                            return (\r\n                                <li key={i} className=\"charinfo_comics_item\">{item.name}</li> \r\n                            )\r\n                        })\r\n                    }\r\n   \r\n                </ul>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import {useState, useEffect, useRef, useMemo} from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport ErrorMessage from '../error-message/error-message';\r\nimport Spinner from '../spinner/spinner';\r\nimport useMarvelService from '../../services/marvel-service';\r\nimport './char-list.scss';\r\n\r\nconst setContent = (process, Component, newItemLoading ) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Spinner/>;\r\n        case 'loading':\r\n            return newItemLoading ? <Component/> : <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component/>;\r\n        case 'error':\r\n            return <ErrorMessage/>\r\n        default: \r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nconst CharList = (props) => {\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(210);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n    \r\n    const {getAllCharacters, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        if (newCharList.lenght < 9) {\r\n            ended = true\r\n        }\r\n\r\n        setCharList(charList => [...charList, ...newCharList]);\r\n        setNewItemLoading(newItemLoading => false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(charEnded => ended);\r\n    } \r\n\r\n    const itemRefs = useRef([]);\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('charlist_item_selected'));\r\n        itemRefs.current[id].classList.add('charlist_item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    function renderItems(arr) {\r\n        const items = arr.map((item, i) => {\r\n            let imgStyle = {'objectFit' : 'cover'};\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = {'objectFit' : 'unset'};\r\n            }\r\n\r\n            return (\r\n                <div \r\n                    className=\"charlist_item\" \r\n                    tabIndex={0}\r\n                    ref={el => itemRefs.current[i] = el}\r\n                    key={item.id}\r\n                    onClick={() => {\r\n                        props.onCharSelected(item.id);\r\n                        focusOnItem(i);\r\n                    }}\r\n                    onKeyPress={(e) => {\r\n                        if (e.key === ' ' || e.key === \"Enter\") {\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i);\r\n                        }\r\n                    }}>\r\n                    <img src={item.thumbnail} alt={item.name}className=\"charlist_img\" style={imgStyle} />\r\n                    <div className=\"charlist_title\">{item.name}</div>\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div className=\"charlist_wrapper\">\r\n                {items}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const elements = useMemo(() => {\r\n        return setContent(process, () => renderItems(charList), newItemLoading)\r\n        // eslint-disable-next-line\r\n    }, [process]);\r\n\r\n    return (\r\n        <div className=\"charlist\">\r\n            {elements}\r\n            <button \r\n                className='btn btn_long'\r\n                disabled={newItemLoading}\r\n                style={{'display': charEnded ? 'none' : 'block'}}\r\n                onClick={() => onRequest(offset)}>\r\n                LOAD MORE\r\n            </button>\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import './asset.scss';\r\nimport asset from '../../resources/img/asset.png';\r\n\r\nconst Asset = () => {\r\n    return (\r\n        <div className=\"asset\">\r\n            <img src={asset} alt=\"asset\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Asset;","import {useState, useEffect} from 'react'\r\nimport useMarvelService from '../../services/marvel-service';\r\nimport setContent from '../../utils/set-content';\r\n\r\nimport './random-char.scss';\r\nimport decoration from '../../resources/img/decoration.png';\r\n\r\nconst RandomChar = () => {\r\n    const [char, setChar] = useState({});\r\n\r\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n        // const timerId = setInterval(updateChar, 10000);\r\n        // return () => {\r\n        //     clearInterval(timerId)\r\n        // } \r\n        // eslint-disable-next-line\r\n    }, [])\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        getCharacter(id)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            <div className=\"randomchar_wrapper\">\r\n                {setContent(process, View, char)}\r\n\r\n                <div className=\"randomchar_black\">\r\n                    <div className=\"randomchar_black_title\">\r\n                        Random character for today!\r\n                        <br />\r\n                        Do you want to get to know him better?\r\n                    </div>\r\n                    <div className=\"randomchar_black_title\">Or choose another one</div>\r\n                    <button className='btn btn_red randomchar_black_btn' onClick={updateChar}>TRY IT</button>\r\n                    <img src={decoration} alt=\"decoration\" className='randomchar_black_img' />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({data}) => {\r\n    const {name, description, thumbnail, homepage, wiki} = data;\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n    return (\r\n        <div className=\"randomchar_white\">\r\n            <img src={thumbnail} alt={name} className=\"randomchar_white_img\" style={imgStyle} />\r\n            <div className=\"randomchar_white_block\">\r\n                <div className=\"randomchar_white_title\">{name}</div>\r\n                <div className=\"randomchar_white_descr\">{description}</div>\r\n                <div className=\"randomchar_white_btns\">\r\n                    <a href={homepage} className=\"btn btn_red\">HOMEPAGE</a>\r\n                    <a href={wiki} className=\"btn btn_grey\">WIKI</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage} from 'formik';\r\nimport * as yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\nimport useMarvelService from '../../services/marvel-service';\r\nimport ErrorMessage from '../error-message/error-message';\r\n\r\nimport './char-search.scss';\r\n\r\nconst CharSearch = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {clearError, getCharacterByName, process, setProcess} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <ErrorMessage /> : null;\r\n    const results = !char ? null : char.length > 0 ? \r\n                                                <div className=\"search_wrapper\">\r\n                                                    <div className=\"search_title search_title_green\">There is! Visit {char[0].name} page?</div>\r\n                                                    <Link to={`/${char[0].id}`}>\r\n                                                        <button type='submit' className=\"btn btn_grey\">TO PAGE</button>\r\n                                                    </Link>\r\n                                                </div> :\r\n                                                <div className=\"search_wrapper\">\r\n                                                    <div className=\"search_title search_title_red\">The character was not found. Check the name and try again</div>\r\n                                                </div>    \r\n    return (\r\n        <div className=\"search\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={yup.object({\r\n                    charName: yup.string().required('This field is required')\r\n                })}\r\n                onSubmit={({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"search_title\" htmlFor='charName'>Or find a character by name:</label>\r\n                    <div className=\"search_wrapper\">\r\n                        <Field \r\n                            id='charName'\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder='Enter name'\r\n                            className='search_input'/>\r\n                                <button \r\n                                    type='submit' \r\n                                    className=\"btn btn_red\"\r\n                                    disabled={process === 'loading'}>\r\n                                        FIND\r\n                                </button>\r\n                    </div>\r\n                    <FormikErrorMessage component='div' className='search_error' name='charName'/>\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearch;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../error-message/error-message\";\r\nimport './error-boundary.scss';\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return (\r\n                <div className=\"boundary\">\r\n                    <ErrorMessage />\r\n                </div>\r\n            ) \r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport {Helmet} from \"react-helmet\";\r\nimport CharInfo from \"../char-info/char-info\";\r\nimport CharList from \"../char-list/char-list\";\r\nimport Asset from \"../asset/asset\";\r\nimport RandomChar from \"../random-char/random-char\";\r\nimport CharSearch from \"../char-search/char-search\";\r\nimport ErrorBoundary from \"../error-boundary/error-boundary\";\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"wrapper\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <div className=\"right\">\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar} />\r\n                        <CharSearch/>\r\n                    </ErrorBoundary>\r\n                    <Asset />\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'appliccatio/json'}) => {\r\n\r\n        setProcess('loading');\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n    return {request, clearError, process, setProcess};\r\n}","//Запросы к серверу\r\nimport { useHttp } from \"../hooks/http.hook\";\r\n\r\n\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=d8d46a206e1d29c225cfc50d92cea400';\r\n    const _baseOffset = 210;\r\n\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            descriptionAll: char.description ? char.description : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.description || 'There is no description',\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            price: comic.prices[0].price ? `${comic.prices[0].price}$` : 'not available',\r\n            pageCount: comic.pageCount ? `${comic.pageCount} p.` : 'No information about the number of pages',\r\n            language: comic.textObjects[0]?.language || \"en-us\",\r\n        }\r\n    }\r\n\r\n    return {getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName, process, setProcess};\r\n}\r\n\r\nexport default useMarvelService;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <div className=\"sceleton\">\r\n            <div className=\"sceleton_title\">Please select a character to see information</div>\r\n            <div className=\"sceleton_block\">\r\n                <div className=\"sceleton_circle pulse\"></div>\r\n                <div className=\"sceleton_rectangle_mini pulse\"></div>\r\n                <div className=\"sceleton_rectangle_big pulse\"></div>\r\n                <div className=\"sceleton_rectangle_big pulse\"></div>\r\n                <div className=\"sceleton_rectangle_big pulse\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import ErrorMessage from '../components/error-message/error-message';\r\nimport Spinner from '../components/spinner/spinner';\r\nimport Skeleton from '../components/skeleton/skeleton';\r\n\r\n\r\nconst setContent = (process, Component, data ) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data} />;\r\n        case 'error':\r\n            return <ErrorMessage/>\r\n        default: \r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["ErrorMessage","_jsx","src","errorGif","alt","className","View","_ref","data","name","description","thumbnail","homepage","wiki","comics","imgStyle","_jsxs","children","style","href","lenght","map","item","i","props","char","setChar","useState","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateChar","charId","onCharLoaded","then","setContent","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","itemRefs","useRef","focusOnItem","id","current","forEach","classList","remove","add","focus","elements","useMemo","Component","Spinner","Error","arr","items","tabIndex","ref","el","onClick","onCharSelected","onKeyPress","e","key","renderItems","disabled","Asset","asset","RandomChar","Math","floor","random","decoration","CharSearch","getCharacterByName","errorMessage","results","length","Link","to","concat","type","Formik","initialValues","charName","validationSchema","yup","required","onSubmit","Form","htmlFor","Field","placeholder","FormikErrorMessage","component","ErrorBoundary","constructor","arguments","state","error","componentDidCatch","errorInfo","console","log","this","setState","render","MainPage","selectedChar","_Fragment","Helmet","content","CharList","CharInfo","request","useHttp","useCallback","async","url","method","undefined","body","headers","response","fetch","ok","status","json","_apiBase","_apiKey","_transformCharacter","slice","descriptionAll","path","extension","urls","_transformComics","comic","_comic$textObjects$","title","price","prices","pageCount","language","textObjects","res","getAllComics","getComic","Skeleton"],"sourceRoot":""}