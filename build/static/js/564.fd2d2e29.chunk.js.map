{"version":3,"file":"static/js/564.fd2d2e29.chunk.js","mappings":"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","sources":["components/app-banner/app-banner.js","components/error-message/error-message.js","components/pages/single-page.js","hooks/http.hook.js","services/marvel-service.js","components/skeleton/skeleton.js","utils/set-content.js"],"sourcesContent":["import './app-banner.scss';\r\nimport avengers from '../../resources/img/avengers.png';\r\nimport avengersLogo from '../../resources/img/avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"banner\">\r\n            <div className=\"banner_wrapper\">\r\n                <img src={avengers} alt=\"avengers\" className=\"banner_img\" />\r\n                <div className=\"banner_title\">\r\n                    New comics every week!\r\n                    <br />\r\n                    Stay tuned!\r\n                </div>\r\n                <img src={avengersLogo} alt=\"avengers logo\" className=\"banner_img\" />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBanner;","import errorGif from './error.gif';\r\nimport './error-message.scss';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={errorGif} alt=\"error\" className='error' />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useParams } from 'react-router-dom';\r\nimport useMarvelService from '../../services/marvel-service';\r\nimport { useState, useEffect } from 'react';\r\nimport setContent from '../../utils/set-content';\r\nimport AppBanner from '../app-banner/app-banner';\r\n\r\nconst SinglePage = ({Component, dataType}) => {\r\n    const {id} = useParams();\r\n\r\n    const [data, setData] = useState(null);\r\n    const { getComic, getCharacter, clearError, process, setProcess} = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        updateData();\r\n        // eslint-disable-next-line\r\n    }, [id])\r\n\r\n    const onDataLoaded = (data) => {\r\n        setData(data);\r\n    }\r\n\r\n    const updateData = () => {\r\n        clearError();\r\n        switch (dataType) {\r\n            case 'comic':\r\n                getComic(id)\r\n                    .then(onDataLoaded)\r\n                    .then(() => setProcess('confirmed'))\r\n                    break;\r\n            case 'character':\r\n                getCharacter(id)\r\n                    .then(onDataLoaded)\r\n                    .then(() => setProcess('confirmed'))\r\n                    break;\r\n            default:\r\n                throw new Error('Unexpected process state')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <AppBanner/>\r\n            {setContent(process, Component, data)}\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nexport default SinglePage;","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'appliccatio/json'}) => {\r\n\r\n        setProcess('loading');\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n    return {request, clearError, process, setProcess};\r\n}","//Запросы к серверу\r\nimport { useHttp } from \"../hooks/http.hook\";\r\n\r\n\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=d8d46a206e1d29c225cfc50d92cea400';\r\n    const _baseOffset = 210;\r\n\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            descriptionAll: char.description ? char.description : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comic) => {\r\n        return {\r\n            id: comic.id,\r\n            title: comic.title,\r\n            description: comic.description || 'There is no description',\r\n            thumbnail: comic.thumbnail.path + '.' + comic.thumbnail.extension,\r\n            price: comic.prices[0].price ? `${comic.prices[0].price}$` : 'not available',\r\n            pageCount: comic.pageCount ? `${comic.pageCount} p.` : 'No information about the number of pages',\r\n            language: comic.textObjects[0]?.language || \"en-us\",\r\n        }\r\n    }\r\n\r\n    return {getAllCharacters, getCharacter, clearError, getAllComics, getComic, getCharacterByName, process, setProcess};\r\n}\r\n\r\nexport default useMarvelService;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <div className=\"sceleton\">\r\n            <div className=\"sceleton_title\">Please select a character to see information</div>\r\n            <div className=\"sceleton_block\">\r\n                <div className=\"sceleton_circle pulse\"></div>\r\n                <div className=\"sceleton_rectangle_mini pulse\"></div>\r\n                <div className=\"sceleton_rectangle_big pulse\"></div>\r\n                <div className=\"sceleton_rectangle_big pulse\"></div>\r\n                <div className=\"sceleton_rectangle_big pulse\"></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import ErrorMessage from '../components/error-message/error-message';\r\nimport Spinner from '../components/spinner/spinner';\r\nimport Skeleton from '../components/skeleton/skeleton';\r\n\r\n\r\nconst setContent = (process, Component, data ) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton/>;\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        case 'confirmed':\r\n            return <Component data={data} />;\r\n        case 'error':\r\n            return <ErrorMessage/>\r\n        default: \r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;"],"names":["AppBanner","_jsx","className","children","_jsxs","src","avengers","alt","avengersLogo","ErrorMessage","errorGif","_ref","Component","dataType","id","useParams","data","setData","useState","getComic","getCharacter","clearError","process","setProcess","useMarvelService","useEffect","updateData","onDataLoaded","then","Error","_Fragment","setContent","request","useHttp","useCallback","async","url","method","arguments","length","undefined","body","headers","response","fetch","ok","concat","status","json","e","_apiBase","_apiKey","_transformCharacter","char","name","description","slice","descriptionAll","thumbnail","path","extension","homepage","urls","wiki","comics","items","_transformComics","comic","_comic$textObjects$","title","price","prices","pageCount","language","textObjects","getAllCharacters","offset","results","map","res","getAllComics","getCharacterByName","Skeleton","Spinner"],"sourceRoot":""}